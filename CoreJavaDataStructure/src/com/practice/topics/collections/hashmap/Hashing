	A hashmap works like this (this is a little bit simplified, but it illustrates the basic mechanism):
	
	It has a number of "buckets" which it uses to store key-value pairs in. Each bucket has a unique number - 
	that's what identifies the bucket. When you put a key-value pair into the map, the hashmap will look at 
	the hash code of the key, and store the pair in the bucket of which the identifier is the hash code of 
	the key. For example: The hash code of the key is 235 -> the pair is stored in bucket number 235. 
	(Note that one bucket can store more then one key-value pair).
	
	When you lookup a value in the hashmap, by giving it a key, it will first look at the hash code of the 
	key that you gave. The hashmap will then look into the corresponding bucket, and then it will compare 
	the key that you gave with the keys of all pairs in the bucket, by comparing them with equals().
	
	Now you can see how this is very efficient for looking up key-value pairs in a map: by the hash code of 
	the key the hashmap immediately knows in which bucket to look, so that it only has to test against what's in that bucket.
	
	Looking at the above mechanism, you can also see what requirements are necessary on the hashCode() and equals() 
	methods of keys:
	
	If two keys are the same (equals() returns true when you compare them), their hashCode() method must return the 
	same number. If keys violate this, then keys that are equal might be stored in different buckets, and the hashmap 
	would not be able to find key-value pairs (because it's going to look in the same bucket).
	
	If two keys are different, then it doesn't matter if their hash codes are the same or not. They will be stored 
	in the same bucket if their hash codes are the same, and in this case, the hashmap will use equals() to tell them apart.
	
	Note:
	It is not required that if two objects are unequal according to the equals(java.lang.Object) method, 
	then calling the hashCode method on each of the two objects must produce distinct integer results. 
	However, the programmer should be aware that producing distinct integer results for unequal objects 
	may improve the performance of hashtables.
	
	
	-best candidate for Key in HashMap would be an Immutable Class with properly implemented Equals and Hashcode 
	 method(Example: String Class)
	-The better hashcode and equals method implementation is better performance of HashMap would be
	-String and Wrapper classes of all Primitives will be a great candidate for keys in HashMap.
	
	
	
	If immutable, the object's hashcode wont change and it allows caching the hashcode of different keys 
	which makes the overall retrieval process very fast. Also for mutable objects ,the hashCode() might
	be dependent on fields that could change, if this happens you wont be able to find the key (and its value) 
	in the HashMap since hashCode() returns different value
